---
cog_bundle_version: 4
name: cfn
description: AWS CloudFormation
version: 0.0.17
docker:
  image: cogcmd/aws-cfn
  tag: 0.0.17
commands:
  template-show:
    executable: "/home/bundle/cog-command"
    description: Shows contents of a template.
    arguments: "<name>"
    options:
      s3:
        type: bool
        required: false
        description: Show template from an S3 URL instead of Git. <name> should be
          the URL.
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch in which to find the template. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag in which to find the template.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA in which to find the template.
    rules:
    - must have cfn:template-show
  template-list:
    executable: "/home/bundle/cog-command"
    description: Lists all templates, filtered by an optional glob pattern.
    arguments: "[pattern]"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to list templates. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag from which to list templates.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA from which to list templates.
    rules:
    - allow
  stack-create:
    executable: "/home/bundle/cog-command"
    description: Creates a new stack based on an existing template and returns the
      newly created stack.
    arguments: "<stack_name> <template_name>"
    options:
      definition:
        type: string
        required: false
        short_flag: d
        description: Name of a definition to use as default values for stack creation.
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to read definitions. Defaults to master.
      tag:
        type: list
        required: false
        short_flag: t
        description: Key-value pairs to associate with this stack. Can be specified
          multiple times.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA from which to read definitions.
      param:
        type: list
        required: false
        short_flag: p
        description: Key-value pairs specified as 'key=value', that specify input
          parameters for your stack. Can be specified multiple times.
      policy:
        type: string
        required: false
        short_flag: o
        description: Stack policy name.
      notify:
        type: list
        required: false
        short_flag: n
        description: The Simple Notification Service (SNS) topic ARNs to publish stack
          related events. Can be specified multiple times.
      on-failure:
        type: string
        required: false
        short_flag: f
        description: 'Determines what action will be taken if stack creation fails.
          Can be one of: rollback, delete or keep.'
      timeout:
        type: int
        required: false
        short_flag: e
        description: The amount of time, specified in minutes, that can pass before
          the stack status becomes CREATE_FAILED.
      capabilities:
        type: list
        required: false
        short_flag: c
        description: 'Can be one of: iam or named_iam.'
    rules:
    - must have cfn:stack
  stack-delete:
    executable: "/home/bundle/cog-command"
    description: Deletes a stack.
    arguments: "<stack_name>"
    rules:
    - must have cfn:stack
  stack-events:
    executable: "/home/bundle/cog-command"
    description: Lists events for a stack. Returns all stack related events for a
      specified stack in reverse chronological order.
    arguments: "<stack_name>"
    rules:
    - must have cfn:stack
  stack-list:
    executable: "/home/bundle/cog-command"
    description: Lists stack summaries.
    long_description: |-
      Lists stack summaries.
      The filter string can be one or more cloudformation stack status strings which include:
      CREATE_IN_PROGRESS, CREATE_FAILED, CREATE_COMPLETE, ROLLBACK_IN_PROGRESS, ROLLBACK_FAILED, ROLLBACK_COMPLETE, DELETE_IN_PROGRESS, DELETE_FAILED, DELETE_COMPLETE, UPDATE_IN_PROGRESS, UPDATE_COMPLETE_CLEANUP_IN_PROGRESS, UPDATE_COMPLETE, UPDATE_ROLLBACK_IN_PROGRESS, UPDATE_ROLLBACK_FAILED, UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS, UPDATE_ROLLBACK_COMPLETE

      Additionally a few special filter strings that correspond to a subset of the standard filter strings may be used:
      ACTIVE, COMPLETE, FAILED, DELETED, IN_PROGRESS
    options:
      filter:
        type: list
        required: false
        short_flag: f
        description: Filter results based on a filter string. Acceptable filter strings
          are listed in the description. Can be specified more than once. Defaults
          to 'ACTIVE'.
    rules:
    - must have cfn:stack
  stack-resources:
    executable: "/home/bundle/cog-command"
    description: Lists stack resources.
    arguments: "<stack_name>"
    rules:
    - must have cfn:stack
  stack-show:
    executable: "/home/bundle/cog-command"
    description: Shows details for a stack.
    arguments: "<stack_name>"
    rules:
    - must have cfn:stack
  changeset-create:
    executable: "/home/bundle/cog-command"
    description: Creates a changeset for a stack.
    arguments: "<stack_name>"
    options:
      param:
        type: list
        required: false
        short_flag: p
        description: Parameter, specified as 'key=value', that specify input parameters
          for the change set. Can be specified multiple times.
      tag:
        type: list
        required: false
        short_flag: t
        description: Key-value pairs, specified as 'key=value', to associate with
          this stack.
      notify:
        type: list
        required: false
        short_flag: n
        description: The Amazon Resource Names (ARNs) of Amazon Simple Notification
          Service (Amazon SNS) topics that AWS CloudFormation associates with the
          stack.
      capabilities:
        type: list
        required: false
        short_flag: c
        description: 'Can be one of: iam or named_iam.'
      description:
        type: string
        required: false
        short_flag: d
        description: 'A description to help you identify this change set. '
      changeset-name:
        type: string
        required: false
        description: The name of your changeset. Defaults to 'changeset<num>'
    rules:
    - must have cfn:changeset
  changeset-list:
    executable: "/home/bundle/cog-command"
    description: Lists cloudformation changesets.
    arguments: "<stack_name>"
    rules:
    - must have cfn:changeset
  changeset-delete:
    executable: "/home/bundle/cog-command"
    description: Deletes cloudformation changesets.
    arguments: "<changeset_name> <stack_name>"
    rules:
    - must have cfn:changeset
  changeset-show:
    executable: "/home/bundle/cog-command"
    description: Shows a cloudformation changeset.
    arguments: "<changeset_name> <stack_name>"
    rules:
    - must have cfn:changeset
  changeset-apply:
    executable: "/home/bundle/cog-command"
    description: Applies a cloudformation changeset.
    arguments: "<changeset_name> <stack_name>"
    rules:
    - must have cfn:changeset
  definition-create:
    executable: "/home/bundle/cog-command"
    description: Creates a stack definition.
    arguments: "<definition-name> <template-name>"
    options:
      defaults:
        type: list
        required: false
        short_flag: d
        description: List of defaults files to use. Defaults are merged together in
          the order they were specified.
      params:
        type: list
        required: false
        short_flag: p
        description: 'Stack parameters which override parameters defined in any defaults
          files specified. Defined with the following pattern: <key>=<value>.'
      tags:
        type: list
        required: false
        short_flag: t
        description: 'Stack tags which override tags defined in any defaults files
          specified. Defined with the following pattern: <key>=<value>.'
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to find defaults files. Defaults to master.
    rules:
    - must have cfn:definition-create
  definition-list:
    executable: "/home/bundle/cog-command"
    description: Lists all definitions, filtered by an optional glob pattern.
    arguments: "[pattern]"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to list definitions. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag from which to list definitions.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA from which to list definitions.
    rules:
    - allow
  definition-show:
    executable: "/home/bundle/cog-command"
    description: Shows contents of a definition.
    arguments: "<name>"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch in which to find the definition. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag in which to find the definition.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA in which to find the definition.
    rules:
    - must have cfn:definition-show
  defaults-create:
    executable: "/home/bundle/cog-command"
    description: Creates a new defaults file.
    arguments: "<name>"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch of which to commit the new defaults file. Defaults to
          master.
    rules:
    - must have cfn:defaults-create
  defaults-list:
    executable: "/home/bundle/cog-command"
    description: Lists all defaults files, filtered by an optional glob pattern.
    arguments: "[pattern]"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to list defaults files. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag from which to list defaults files.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA from which to list defaults files.
    rules:
    - allow
  defaults-show:
    executable: "/home/bundle/cog-command"
    description: Shows contents of a defaults file.
    arguments: "<name>"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch in which to find the defaults file. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag in which to find the defaults file.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA in which to find the defaults file.
    rules:
    - must have cfn:defaults-show
  check-setup:
    executable: "/home/bundle/cog-command"
    description: Checks that all configuration is set correctly
    rules:
    - allow
permissions:
- cfn:stack
- cfn:changeset
- cfn:template-show
- cfn:defaults-create
- cfn:defaults-show
- cfn:definition-create
- cfn:definition-show
templates:
  template_list:
    body: |
      **CloudFormation Templates:**
      ~br~
      ~each var=$results as=template~
      • ~$template.name~
      ~end~
  template_show:
    body: |
      **Template:** ~$results[0].name~
      **Description:** ~$results[0].description~
      ~if cond=$results[0].capabilities bound?~**Capabilities:** ~$results[0].capabilities[0]~~end~

      ~br~
      **Parameters:**

      ~each var=$results[0].parameters~
      • ~$item.parameter_key~ (~$item.parameter_type~) ~if cond=$item.default_value != ""~[~$item.default_value~]~end~

      ~end~
  stack_show:
    body: |
      **~$results[0].stack_name~**

      ~br~
      **Description:** ~$results[0].description~
      **Stack Status:** ~$results[0].stack_status~
      **Last Update:** ~$results[0].last_updated_time~

      ~br~
      **Parameters:**

      ~if cond=$results[0].parameters empty?~
      None
      ~end~
      ~each var=$results[0].parameters~
      • ~$item.parameter_key~=~$item.parameter_value~

      ~end~

      ~br~
      **Outputs:**

      ~if cond=$results[0].outputs empty?~
      None
      ~end~
      ~each var=$results[0].outputs as=item~
      • ~$item.output_key~=~$item.output_value~

      ~end~

      ~br~
      **Tags:**

      ~if cond=$results[0].tags empty?~
      None
      ~end~
      ~each var=$results[0].tags as=item~
      • ~$item.key~=~$item.value~

      ~end~
  stack_event_list:
    body: |
      | Timestamp | Status | Resource Type | Logical ID |
      |-----------|--------|---------------|------------|
      ~each var=$results as=event~
      | ~$event.timestamp~ | ~$event.resource_status~ | ~$event.resource_type~ | ~$event.logical_resource_id~ |
      ~end~
  stack_list:
    body: "| Name | Status | Description |\n|------|--------|-------------|\n~each
      var=$results as=stack~\n| ~$stack.stack_name~ | ~$stack.stack_status~ | ~$stack.template_description~
      | \n~end~\n"
  stack_resource_list:
    body: |
      | Type | Status | Logical ID | Physical ID |
      |------|--------|------------|-------------|
      ~each var=$results as=resource~
      | ~$resource.resource_type~ | ~$resource.resource_status~ | ~$resource.logical_resource_id~ | ~$resource.physical_resource_id~ |
      ~end~
  changeset_list:
    body: |
      | Change Set Name | Status | Creation Time | Description |
      |-----------------|--------|---------------|-------------|
      ~each var=$results as=changeset~
      | ~$changeset.change_set_name~ | ~$changeset.status~ | ~$changeset.creation_time~ | ~$changeset.description~ |
      ~end~
  changeset_show:
    body: |
      ~each var=$results as=changeset~

      ~attachment title=$changeset.change_set_name timestamp=$changeset.creation_time stack=$changeset.stack_name status=$changeset.status color=darkblue~
      ~$changeset.description~
      ~end~

      ~attachment title="Parameters" color=blue~
      | Key | Value |
      |-----|-------|
      ~each var=$changeset.parameters as=param~
      | ~$param.parameter_key~ | ~$param.parameter_value~ |
      ~end~
      ~end~

      ~if cond=$changeset.changes not_empty?~
      ~attachment title="Changes" color=blue~
      | Physical ID | Logical ID | Replacement |
      |-------------|------------|-------------|
      ~each var=$changeset.changes as=change~
      | ~$change.resource_change.physical_resource_id~ | ~$change.resource_change.logical_resource_id~ | ~$change.resource_change.replacement~ |
      ~end~
      ~end~
      ~end~

      ~if cond=$changeset.tags not_empty?~
      ~attachment title="Tags" color=blue~
      | Key | Value |
      |-----|-------|
      ~each var=$changeset.tags as=tag~
      | ~$tag.key~ | ~$tag.value~ |
      ~end~
      ~end~
      ~end~

      ~if cond=$changeset.capabilities not_empty?~
      ~attachment title="Capabilities" color=blue~
      ~each var=$changeset.capabilities as=capability~
      * ~$capability~
      ~end~
      ~end~
      ~end~

      ~attachment color=lightblue~
      To apply this changeset, run:
      cfn:changeset-apply ~$changeset.change_set_name~ ~$changeset.stack_name~
      ~end~

      ~end~
  changeset_delete:
    body: |
      ~each var=$results as=changeset~
      Successfully deleted '~$changeset.changeset_name~'
      ~end~
  defaults_create:
    body: |
      ~each var=$results as=defaults~
      Created defaults file ~$defaults.name~
      ~end~
  defaults_list:
    body: |
      **CloudFormation Defaults:**

      ~br~
      ~each var=$results~
      • ~$item.name~
      ~end~
  defaults_show:
    body: |
      **Defaults:** ~$results[0].meta.name~

      ~br~
      **Params:**

      ~if cond=$results[0].param_list empty?~
      None
      ~end~
      ~each var=$results[0].param_list~
      • ~$item~
      ~end~

      ~br~
      **Tags:**

      ~if cond=$results[0].tag_list empty?~
      None
      ~end~
      ~each var=$results[0].tag_list~
      • ~$item~
      ~end~
  definition_create:
    body: |
      ~each var=$results as=definition~
      Created definition ~$definition.name~
      ~end~
  definition_list:
    body: |
      | Definition | Template | Defaults |
      |------------|----------|----------|
      ~each var=$results~
      | ~$item.name~ | ~$item.data.template.name~ | ~each var=$item.data.defaults as=defaults~~$defaults.name~ ~end~ |
      ~end~
  check_setup:
    body: |
      ~each var=$results as=setup~
      | Check | Success |
      | ----- | ------- |
      | Authentication with git server | ~if cond=$setup.git_auth == 1~yes~end~~if cond=$setup.git_auth == 0~no~end~ |
      | Git repository exists | ~if cond=$setup.git_repo_exists == 1~yes~end~~if cond=$setup.git_repo_exists == 0~no~end~ |
      | Git repository structured correctly | ~if cond=$setup.git_repo_structure == 1~yes~end~~if cond=$setup.git_repo_structure == 0~no~end~ |
      | Authentication with Amazon Web Services | ~if cond=$setup.aws_auth == 1~yes~end~~if cond=$setup.aws_auth == 0~no~end~ |
      | Cloudformation permissions | ~if cond=$setup.aws_cfn_permissions == 1~yes~end~~if cond=$setup.aws_cfn_permissions == 0~no~end~ |
      | S3 permissions | ~if cond=$setup.aws_s3_permissions == 1~yes~end~~if cond=$setup.aws_s3_permissions== 0~no~end~ |
      | S3 bucket exists | ~if cond=$setup.aws_s3_bucket == 1~yes~end~~if cond=$setup.aws_s3_bucket == 0~no~end~ |
      ~end~
  template_body:
    body: "~json var=$results[0]~\n"
  definition_show:
    body: |
      **Name:** ~$results[0].name~
      **Template:** ~$results[0].template.name~
      **Timestamp:** ~$results[0].timestamp~

      ~br~
      **Parameters:**

      ~each var=$results[0].params~
      • ~$item~
      ~end~

      ~br~
      **Tags:**

      ~each var=$results[0].tags~
      • ~$item~
      ~end~

      ~br~
      **Defaults:**

      ~each var=$results[0].defaults~
      • ~$item.name~
      ~end~

      ~br~
      **Overrides:**

      ~json var=$results[0].overrides~
  error_stack_capability:
    body: 'Insufficient capabilities to create stack ~$results[0].name~. Add `-c ~$results[0].capability~`
      to your stack-create options to proceed.

'
  stack_delete:
    body: "**~$results[0].stack_name~**: ~$results[0].stack_status~\n"
