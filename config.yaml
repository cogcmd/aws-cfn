---
cog_bundle_version: 4
name: cfn
description: AWS CloudFormation
version: 0.0.17
docker:
  image: cogcmd/aws-cfn
  tag: 0.0.17
author: Mark Imbriaco <mark@operable.io>
homepage: https://github.com/cogcmd/aws-cfn
long_description: |
  This bundle provides an opinioned interface to CloudFormation's raw
  capabilities, not just to make it easier to use but, easier to use well.
  Commands to perform all basic CloudFormation actions, such as creating and
  listing stacks, are available, as you would expect. But, we've also built a
  set of commands for managing a new concept, stack definitions.

  Stack definitions are a layer on top of CloudFormation templates aimed at
  making them more reusable and easier to work with as a team. They're
  comprised of a defaults file, which is a named set of CloudFormation
  paramters and tags, a named CloudFormation template, and a set of overrides.
  All of these layers are merged together to make up all the inputs required to
  create a stack.

  Because most engineering and operations teams require a canonical version of
  their infrastructure definitions to be stored in a VCS repository, templates,
  defaults files, and stack definitions will be stored in a git repository.
  Doing so supports several common use cases such as debugging and auditing.

  Putting this all together results in a reusable, repeatable workflow that can
  easily be executed from chat, while still allowing basic CloudFormation
  actions when necessary.
config:
  notes: |
    The commands in this bundle support a number of ways to authenticate with
    Amazon Web Services. If you're not hosting a relay on EC2, you can provide
    basic credentials with the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`
    environment variables. Or, if you are hosting Relay on EC2, you can keep
    those environment variables blank and allow the commands to request
    credentials from instance metadata. We also support an `AWS_STS_ROLE_ARN`
    environment variable if you'd like to assume a role for all AWS requests.
    You can read more about how IAM instance metadata and STS role ARNs work at
    the following documentation page:

    http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html

    For access to the git repository, you'll need to provide a key that has
    read and write access to all branches to be used by the command. If you're
    having trouble providing the key in your dynamic config file, make sure
    that row like the following:

    ```
    - |
        GIT_SSH_KEY=-----BEGIN RSA PRIVATE KEY-----
        66HcO6zqknSn5b+kbn5TKiU/TUxjE1wUYZqiEBI+9t7kZWT5H3aTi5zhhHti0xGF
        vhI8N1p1ZRP8EeVcRASGeCjVt58llQhNpWP9bArz0B1vU5QvFZJ0gnnk5LI3uFYr
        ...
    ```

    Once you've set all of your environment variables with dynamic config, you
    can check to make sure all of them are set correctly and have the necessary
    permissions by running `check setup`.
  env:
  - var: AWS_ACCESS_KEY_ID
    description: ID of the access key used to authenticate with the AWS API. Required
      if IAM instance metadata not used.
  - var: AWS_SECRET_ACCESS_KEY
    description: Secret of the access key used to authenticate with the AWS API. Required
      if IAM instance metadata not used.
  - var: AWS_REGION
    description: Optional region used for all commands
  - var: AWS_STS_ROLE_ARN
    description: Optional STS role ARN of which to assume when making requests to
      the AWS API.
  - var: S3_STACK_DEFINITON_BUCKET
    description: Required bucket name where created definitions will be written and
      read from when used to create stacks.
  - var: S3_STACK_DEFINITON_PREFIX
    description: Optional bucket key prefix to use when storing definitions in a shared
      bucket.
  - var: GIT_REMOTE_URL
    description: Url of git repository used to read and write defaults files, templates,
      and definitions.
  - var: GIT_SSH_KEY
    description: SSH key used to authenticate with the above git repository. Must
      have read and write access.
commands:
  template-show:
    executable: "/home/bundle/cog-command"
    description: Shows contents of a template.
    long_description: |
      Templates can either be shown by passing the name of the template or the
      full url if the `--s3` option is specified. When showing a template by
      name, the relative path without the file extension is used. Only json,
      yml, and yaml extensions are supported.
    exammples: |
      Showing a template by name:

      ```
      template show webapp
      ```

      Showing a template in a subdirectory:

      ```
      template show apps/warehouse/web
      ```

      Show a template on a branch by name:

      ```
      template show -b staging webapp
      ```


      Showing a template by S3 url:

      ```
      template show --s3 https://s3.amazonaws.com/bucket/prefix/definitions/webapp/127471284811/template.yml
      ```
    arguments: "<name>"
    options:
      s3:
        type: bool
        required: false
        description: Show template from an S3 URL instead of Git. <name> should be
          the URL.
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch in which to find the template. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag in which to find the template.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA in which to find the template.
    rules:
    - must have cfn:template-show
  template-list:
    executable: "/home/bundle/cog-command"
    description: Lists all templates, filtered by an optional glob pattern.
    long_description: |-
      The names, the relative path without the file extension of all templates in all subdirectories are listed. Only json, yml, and yaml extensions are supported.
      When filtering the list with a pattern, only simple patterns similar to a shell glob are accepted.
      `*` - Matches any string of characters `**` - Matches any path `?` - Matches any one character `[set]` - Matches any one character in the set `{p,q}` - Matches either literal p or q `\` - Escapes the next pattern character
    examples: |
      Listing all templates:

      ```
      template list
      ```

      Listing all templates in a subdirectory that start with "webapp":

      ```
      template list "apps/warehouse/webapp*"
      ```
    arguments: "[pattern]"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to list templates. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag from which to list templates.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA from which to list templates.
    rules:
    - allow
  stack-create:
    executable: "/home/bundle/cog-command"
    description: Creates a new stack based on an existing template and returns the
      newly created stack.
    long_description: |
      Although this command can be used on it's own to fully define and create
      a stack with a template url just as you would with the awscli tool, it is
      entended to be used with a stack definition. This can be accomplished by
      first creating a stack definition (see `definition-create`) and then
      either defining that definition by name with the `--definition` option,
      or by pipeing that definition to the `stack-create` command.
    examples: |
      Creating a stack from a definition with a single parameter:

      ```
      stack create webapp3 -d webapp -p "SshKey=web-team"
      ```

      Creating a stack with a definition in a pipeline:

      ```
      definition show webapp3 | stack create $name $template_url -p $params -t $tags -p "SshKey=web-team"
      ```

      Creating a stack without a definition:

      ```
      stack create webapp3 https://s3.amazonaws.com/bucket/webapp3.yml -p "SshKey=web-team" -p "Port=8080" -t "Name=webapp3"
      ```
    arguments: "<stack-name> <template-url> | [<stack-name>] --definition <definition-name>"
    options:
      definition:
        type: string
        required: false
        short_flag: d
        description: Name of a definition to use as default values for stack creation.
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to read definitions. Defaults to master.
      tag:
        type: list
        required: false
        short_flag: t
        description: Key-value pairs to associate with this stack. Can be specified
          multiple times.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA from which to read definitions.
      param:
        type: list
        required: false
        short_flag: p
        description: Key-value pairs specified as 'key=value', that specify input
          parameters for your stack. Can be specified multiple times.
      policy:
        type: string
        required: false
        short_flag: o
        description: Stack policy name.
      notify:
        type: list
        required: false
        short_flag: n
        description: The Simple Notification Service (SNS) topic ARNs to publish stack
          related events. Can be specified multiple times.
      on-failure:
        type: string
        required: false
        short_flag: f
        description: 'Determines what action will be taken if stack creation fails.
          Can be one of: rollback, delete or keep.'
      timeout:
        type: int
        required: false
        short_flag: e
        description: The amount of time, specified in minutes, that can pass before
          the stack status becomes CREATE_FAILED.
      capabilities:
        type: list
        required: false
        short_flag: c
        description: 'Can be one of: iam or named_iam.'
    rules:
    - must have cfn:stack
  stack-delete:
    executable: "/home/bundle/cog-command"
    description: Deletes a stack.
    arguments: "<stack-name>"
    rules:
    - must have cfn:stack
  stack-events:
    executable: "/home/bundle/cog-command"
    description: Lists events for a stack. Returns all stack related events for a
      specified stack in reverse chronological order.
    arguments: "<stack-name>"
    rules:
    - must have cfn:stack
  stack-list:
    executable: "/home/bundle/cog-command"
    description: Lists stack summaries.
    long_description: |-
      Lists stack summaries.
      The filter string can be one or more cloudformation stack status strings which include:
      CREATE_IN_PROGRESS, CREATE_FAILED, CREATE_COMPLETE, ROLLBACK_IN_PROGRESS, ROLLBACK_FAILED, ROLLBACK_COMPLETE, DELETE_IN_PROGRESS, DELETE_FAILED, DELETE_COMPLETE, UPDATE_IN_PROGRESS, UPDATE_COMPLETE_CLEANUP_IN_PROGRESS, UPDATE_COMPLETE, UPDATE_ROLLBACK_IN_PROGRESS, UPDATE_ROLLBACK_FAILED, UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS, UPDATE_ROLLBACK_COMPLETE

      Additionally a few special filter strings that correspond to a subset of the standard filter strings may be used:
      ACTIVE, COMPLETE, FAILED, DELETED, IN_PROGRESS
    examples: |
      Listing all stacks:

      ```
      stack list
      ```

      Listing all stacks that have failed:

      ```
      stack list -f FAILED
      ```
    options:
      filter:
        type: list
        required: false
        short_flag: f
        description: Filter results based on a filter string. Acceptable filter strings
          are listed in the description. Can be specified more than once. Defaults
          to 'ACTIVE'.
    rules:
    - must have cfn:stack
  stack-resources:
    executable: "/home/bundle/cog-command"
    description: Lists stack resources.
    arguments: "<stack-name>"
    rules:
    - must have cfn:stack
  stack-show:
    executable: "/home/bundle/cog-command"
    description: Shows details for a stack.
    arguments: "<stack-name>"
    rules:
    - must have cfn:stack
  changeset-create:
    executable: "/home/bundle/cog-command"
    description: Creates a changeset for a stack.
    arguments: "<stack-name>"
    options:
      definition:
        type: string
        required: false
        short_flag: d
        description: Name of a definition to use as default values for updating the
          stack.
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to read definitions. Defaults to master.
      tag:
        type: list
        required: false
        short_flag: t
        description: Key-value pairs, specified as 'key=value', to associate with
          this stack.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA from which to read definitions.
      template_url:
        type: string
        required: false
        short_flag: T
        description: URL for updated CloudFormation template.
      param:
        type: list
        required: false
        short_flag: p
        description: Parameter, specified as 'key=value', that specify input parameters
          for the change set. Can be specified multiple times.
      notify:
        type: list
        required: false
        short_flag: n
        description: The Amazon Resource Names (ARNs) of Amazon Simple Notification
          Service (Amazon SNS) topics that AWS CloudFormation associates with the
          stack.
      capabilities:
        type: list
        required: false
        short_flag: c
        description: 'Can be one of: iam or named_iam.'
      description:
        type: string
        required: false
        short_flag: D
        description: 'A description to help you identify this change set. '
      changeset-name:
        type: string
        required: false
        description: The name of your changeset. Defaults to 'changeset<num>'
    rules:
    - must have cfn:changeset
  changeset-list:
    executable: "/home/bundle/cog-command"
    description: Lists cloudformation changesets.
    arguments: "<stack-name>"
    rules:
    - must have cfn:changeset
  changeset-delete:
    executable: "/home/bundle/cog-command"
    description: Deletes cloudformation changesets.
    arguments: "<changeset-name> <stack-name>"
    rules:
    - must have cfn:changeset
  changeset-show:
    executable: "/home/bundle/cog-command"
    description: Shows a cloudformation changeset.
    arguments: "<changeset-name> <stack-name>"
    rules:
    - must have cfn:changeset
  changeset-apply:
    executable: "/home/bundle/cog-command"
    description: Applies a cloudformation changeset.
    arguments: "<changeset-name> <stack-name>"
    rules:
    - must have cfn:changeset
  definition-create:
    executable: "/home/bundle/cog-command"
    description: Creates a stack definition.
    long_description: |
      Definitions are defined with a name, a template, a set of defaults files,
      and a set of overrides (tags and parameters). These layers are then all
      merged together in the above order and stored in the defined git
      repository for use with the `stack-create` command.
    examples: |
      Creating a simple definition without overrides:

      ```
      definition create webapp-prod webapp
      ```

      Creating a definition with a few overrides:

      ```
      definition create webapp-staging webapp -p "Port=8080" -p "InstanceType=t2.medium" -t "Env=staging"
      ```
    arguments: "<definition-name> <template-name>"
    options:
      defaults:
        type: list
        required: false
        short_flag: d
        description: List of defaults files to use. Defaults are merged together in
          the order they were specified.
      params:
        type: list
        required: false
        short_flag: p
        description: 'Stack parameters which override parameters defined in any defaults
          files specified. Defined with the following pattern: <key>=<value>.'
      tags:
        type: list
        required: false
        short_flag: t
        description: 'Stack tags which override tags defined in any defaults files
          specified. Defined with the following pattern: <key>=<value>.'
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to find defaults files. Defaults to master.
    rules:
    - must have cfn:definition-create
  definition-list:
    executable: "/home/bundle/cog-command"
    description: Lists all definitions, filtered by an optional glob pattern.
    long_description: |
      The names of each definition are listed.

      When filtering the list with a pattern, only simple patterns
      similar to a shell glob are accepted.

      `*` - Matches any string of characters
      `?` - Matches any one character
      `[set]` - Matches any one character in the set
      `{p,q}` - Matches either literal p or q
      `\` - Escapes the next pattern character
    examples: |
      Listing all definitions:

      ```
      definition list
      ```

      Listing all definitions that start with "webapp":

      ```
      definition list "webapp*"
      ```
    arguments: "[pattern]"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to list definitions. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag from which to list definitions.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA from which to list definitions.
    rules:
    - allow
  definition-show:
    executable: "/home/bundle/cog-command"
    description: Shows contents of a definition.
    long_description: |
      The most recently created stack definition with the name specified is
      found and returned as json. Keys `params` and `tags` are formatted to be
      used in a pipeline. See examples for usage.
    examples: |
      Show a definition:

      ```
      definition show webapp
      ```

      Show a definition and use it in a pipeline with `stack-create`:

      ```
      definition show webapp3 | stack create $name $template_url -p $params -t $tags -p "SshKey=web-team"
      ```
    arguments: "<name>"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch in which to find the definition. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag in which to find the definition.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA in which to find the definition.
    rules:
    - must have cfn:definition-show
  defaults-create:
    executable: "/home/bundle/cog-command"
    description: Creates a new defaults file.
    long_description: |
      Defaults are named sets of parameters and tags applied to templates when
      creating a stack. Creating a few defaults file stores the parameters and
      tags provided as previous command input as JSON in the specified git
      repository. When specifying params and tags from the previous command and
      via options, options are merged on top of the previous command output,
      overriding them.
    examples: |
      Create a defaults file with parameters and tags:

      ```
      defaults create staging -p "Port=80" -t "Env=staging"
      ```

      Create a defaults file from a previous command's output:

      ```
      seed '{ "params": { "Port": "80" }, "tags": { "Env": "staging" } }' | defaults create staging
      ```
    arguments: "<name>"
    options:
      params:
        type: list
        required: false
        short_flag: p
        description: |
          Parameters to include in the defaults file. Defined with the
          following pattern: <key>=<value>. Merged with any params provided
          from previous command output.
      tags:
        type: list
        required: false
        short_flag: t
        description: |
          Tags to include in the defaults file. Defined with the following
          pattern: <key>=<value>. Merged with any tags provided from previous
          command output.
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch of which to commit the new defaults file. Defaults to
          master.
    rules:
    - must have cfn:defaults-create
  defaults-list:
    executable: "/home/bundle/cog-command"
    description: Lists all defaults files, filtered by an optional glob pattern.
    long_description: |
      The names of each defaults file are listed.

      When filtering the list with a pattern, only simple patterns
      similar to a shell glob are accepted.

      `*` - Matches any string of characters
      `?` - Matches any one character
      `[set]` - Matches any one character in the set
      `{p,q}` - Matches either literal p or q
      `\` - Escapes the next pattern character
    examples: |
      Listing all defaults files:

      ```
      defaults list
      ```

      Listing all defaults files that start with "webapp":

      ```
      defaults list "webapp*"
      ```
    arguments: "[pattern]"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch from which to list defaults files. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag from which to list defaults files.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA from which to list defaults files.
    rules:
    - allow
  defaults-show:
    executable: "/home/bundle/cog-command"
    description: Shows contents of a defaults file.
    long_description: |
      The name and the parsed JSON data are returned for use in other pipelines
      or for viewing in chat.
    examples: |
      Show a defaults file:

      ```
      defaults show staging
      ```
    arguments: "<name>"
    options:
      branch:
        type: string
        required: false
        short_flag: b
        description: Branch in which to find the defaults file. Defaults to master.
      tag:
        type: string
        required: false
        short_flag: t
        description: Tag in which to find the defaults file.
      sha:
        type: string
        required: false
        short_flag: s
        description: Git commit SHA in which to find the defaults file.
    rules:
    - must have cfn:defaults-show
  check-setup:
    executable: "/home/bundle/cog-command"
    description: Checks that all configuration is set correctly
    long_description: |
      This command is meant to be a sanity check for users once they have
      installed and configured the bundle. It will inspect provided environment
      variables and try to make sure that the accounts used have all the
      necessary permissions.
    rules:
    - allow
permissions:
- cfn:stack
- cfn:changeset
- cfn:template-show
- cfn:defaults-create
- cfn:defaults-show
- cfn:definition-create
- cfn:definition-show
templates:
  template_list:
    body: |
      **CloudFormation Templates:**
      ~br~
      ~each var=$results as=template~
      • ~$template.name~
      ~end~
  template_show:
    body: |
      **Template:** ~$results[0].name~
      **Description:** ~$results[0].description~
      ~if cond=$results[0].capabilities bound?~**Capabilities:** ~$results[0].capabilities[0]~~end~

      ~br~
      **Parameters:**

      ~each var=$results[0].parameters~
      • ~$item.parameter_key~ (~$item.parameter_type~) ~if cond=$item.default_value != ""~[~$item.default_value~]~end~

      ~end~
  stack_show:
    body: |
      **Stack:** ~$results[0].stack_name~

      ~br~
      **Description:** ~$results[0].description~
      **Stack Status:** ~$results[0].stack_status~
      **Last Update:** ~$results[0].last_updated_time~

      ~br~
      **Parameters:**

      ~if cond=$results[0].parameters empty?~
      None
      ~end~
      ~each var=$results[0].parameters~
      • ~$item.parameter_key~=~$item.parameter_value~

      ~end~

      ~br~
      **Outputs:**

      ~if cond=$results[0].outputs empty?~
      None
      ~end~
      ~each var=$results[0].outputs as=item~
      • ~$item.output_key~=~$item.output_value~

      ~end~

      ~br~
      **Tags:**

      ~if cond=$results[0].tags empty?~
      None
      ~end~
      ~each var=$results[0].tags as=item~
      • ~$item.key~=~$item.value~

      ~end~
  stack_event_list:
    body: |
      | Timestamp | Status | Resource Type | Logical ID |
      |-----------|--------|---------------|------------|
      ~each var=$results as=event~
      | ~$event.timestamp~ | ~$event.resource_status~ | ~$event.resource_type~ | ~$event.logical_resource_id~ |
      ~end~
  stack_list:
    body: "| Name | Status | Description |\n|------|--------|-------------|\n~each
      var=$results as=stack~\n| ~$stack.stack_name~ | ~$stack.stack_status~ | ~$stack.template_description~
      | \n~end~\n"
  stack_resource_list:
    body: |
      | Type | Status | Logical ID | Physical ID |
      |------|--------|------------|-------------|
      ~each var=$results as=resource~
      | ~$resource.resource_type~ | ~$resource.resource_status~ | ~$resource.logical_resource_id~ | ~$resource.physical_resource_id~ |
      ~end~
  changeset_list:
    body: |
      **Changesets:** ~$results[0].stack_name~

      ~br~
      ~each var=$results as=changeset~
      • **~$changeset.change_set_name~:** ~$changeset.execution_status~ / ~$changeset.status~
      ~if cond=$changeset.description bound?~
            ~$changeset.description~
      ~end~
      ~end~
  changeset_show:
    body: |
      ~each var=$results as=changeset~

      **Changeset:** ~$changeset.change_set_name~
      **Stack:** ~$changeset.stack_name~
      ~if cond=$changeset.description not_empty?~
      **Description:** ~$changeset.description~
      ~end~
      ~if cond=$changeset.capabilities not_empty?~
      **Capabilities:** ~$changeset.capabilities[0]~
      ~end~
      **Status:** ~$changeset.status~
      **Timestamp:** ~$changeset.creation_time~

      ~br~
      **Parameters:**

      ~each var=$changeset.parameters as=param~
      ~if cond=$param.parameter_value != ""~• ~$param.parameter_key~=~$param.parameter_value~~end~

      ~end~

      ~br~
      **Changes:**
      ~if cond=$changeset.status != "CREATE_COMPLETE"~
      Changeset still creating. Check back for detailed changes.
      ~end~
      ~if cond=$changeset.status == "CREATE_COMPLETE"~
      ~each var=$changeset.changes as=change~
      • ~$change.resource_change.logical_resource_id~ (~$change.resource_change.action~) ~if cond=$change.resource_change.replacement == "True"~_Replace_~end~

      ~end~
      ~end~

      ~if cond=$changeset.tags not_empty?~
      ~br~
      **Tags:**

      ~each var=$changeset.tags as=tag~
      • ~$tag.key~=~$tag.value~
      ~end~
      ~end~

      ~br~
      To apply this changeset, run:

      ```
      cfn:changeset-apply ~$changeset.change_set_name~ ~$changeset.stack_name~
      ```
      ~end~
  changeset_delete:
    body: |
      ~each var=$results as=changeset~
      Successfully deleted ~$changeset.changeset_name~ for stack ~$changeset.stack_name~.
      ~end~
  defaults_create:
    body: |
      ~each var=$results as=defaults~
      Created defaults file ~$defaults.name~
      ~end~
  defaults_list:
    body: |
      **Defaults:**

      ~br~
      ~each var=$results~
      • ~$item.name~
      ~end~
  defaults_show:
    body: |
      **Defaults:** ~$results[0].meta.name~

      ~br~
      **Params:**

      ~if cond=$results[0].param_list empty?~
      None
      ~end~
      ~each var=$results[0].param_list~
      • ~$item~
      ~end~

      ~br~
      **Tags:**

      ~if cond=$results[0].tag_list empty?~
      None
      ~end~
      ~each var=$results[0].tag_list~
      • ~$item~
      ~end~
  definition_create:
    body: |
      ~each var=$results as=definition~
      Created definition ~$definition.name~
      ~end~
  definition_list:
    body: |
      **CloudFormation Definitions:**

      | Name | Template | Defaults |
      |------|----------|----------|
      ~each var=$results~
      | ~$item.name~ | ~$item.data.template.name~ | ~each var=$item.data.defaults as=defaults~~$defaults.name~ ~end~ |
      ~end~
  check_setup:
    body: |
      ~each var=$results as=setup~
      | Check | Success |
      | ----- | ------- |
      | Authentication with git server | ~if cond=$setup.git_auth == 1~yes~end~~if cond=$setup.git_auth == 0~no~end~ |
      | Git repository exists | ~if cond=$setup.git_repo_exists == 1~yes~end~~if cond=$setup.git_repo_exists == 0~no~end~ |
      | Git repository structured correctly | ~if cond=$setup.git_repo_structure == 1~yes~end~~if cond=$setup.git_repo_structure == 0~no~end~ |
      | Authentication with Amazon Web Services | ~if cond=$setup.aws_auth == 1~yes~end~~if cond=$setup.aws_auth == 0~no~end~ |
      | Cloudformation permissions | ~if cond=$setup.aws_cfn_permissions == 1~yes~end~~if cond=$setup.aws_cfn_permissions == 0~no~end~ |
      | S3 permissions | ~if cond=$setup.aws_s3_permissions == 1~yes~end~~if cond=$setup.aws_s3_permissions== 0~no~end~ |
      | S3 bucket exists | ~if cond=$setup.aws_s3_bucket == 1~yes~end~~if cond=$setup.aws_s3_bucket == 0~no~end~ |
      ~end~
  template_body:
    body: "~json var=$results[0]~\n"
  definition_show:
    body: |
      **Definition:** ~$results[0].name~
      **Template:** ~$results[0].template.name~
      ~if cond=$results[0].timestamp not_empty?~**Timestamp:** ~$results[0].timestamp~~end~

      # ----------------------------------------------------------------------------
      # Parameters
      # ----------------------------------------------------------------------------
      ~if cond=$results[0].params not_empty?~
      ~br~
      **Parameters:**

      ~each var=$results[0].params~
      • ~$item~
      ~end~
      ~end~
      # ----------------------------------------------------------------------------
      # Tags
      # ----------------------------------------------------------------------------
      ~if cond=$results[0].tags not_empty?~
      ~br~
      **Tags:**

      ~each var=$results[0].tags~
      • ~$item~
      ~end~
      ~end~
      # ----------------------------------------------------------------------------
      # Defaults
      # ----------------------------------------------------------------------------
      ~if cond=$results[0].defaults not_empty?~
      ~br~
      **Defaults:**

      ~each var=$results[0].defaults~
      • ~$item.name~
      ~end~
      ~end~
      # ----------------------------------------------------------------------------
      # Override Params
      # ----------------------------------------------------------------------------
      ~if cond=$results[0].overrides.params not_empty?~
      ~br~
      **Override Params:**

      ~each var=$results[0].overrides.params~
      • ~$item~
      ~end~
      ~end~
      # ----------------------------------------------------------------------------
      # Override Tags
      # ----------------------------------------------------------------------------
      ~if cond=$results[0].overrides.tags not_empty?~
      ~br~
      **Override Tags:**

      ~each var=$results[0].overrides.tags~
      • ~$item~
      ~end~
      ~end~
      # ----------------------------------------------------------------------------
  error_stack_capability:
    body: 'Insufficient capabilities to create stack ~$results[0].name~. Add `-c ~$results[0].capability~`
      to your stack-create options to proceed.

'
  stack_delete:
    body: "**~$results[0].stack_name~**: ~$results[0].stack_status~\n"
  changeset_missing_stack_name:
    body: 'Error: Unable to list stacks.

'
